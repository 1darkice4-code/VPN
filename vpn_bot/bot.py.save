import os
import json
import secrets
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor


# ===============================
# –ö–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ .env
# ===============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ .env")

DEV_SKIP_PAYMENTS = os.getenv("DEV_SKIP_PAYMENTS", "1") == "1"

WG_SERVER_ENDPOINT = os.getenv("WG_SERVER_ENDPOINT", "127.0.0.1:51820")
WG_SERVER_PUBLIC_KEY = os.getenv("WG_SERVER_PUBLIC_KEY", "PUBLIC_KEY_PLACEHOLDER")
WG_CLIENT_DNS = os.getenv("WG_CLIENT_DNS", "1.1.1.1,8.8.8.8")
WG_ALLOWED_IPS = os.getenv("WG_ALLOWED_IPS", "0.0.0.0/0,::/0")
WG_SUBNET = os.getenv("WG_SUBNET", "10.66.66.0/24")

# ===============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
# ===============================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–ª–∞–Ω
PLANS = {
    "basic": {"name": "–ë–∞–∑–æ–≤—ã–π", "price": 10},
    "pro": {"name": "Pro", "price": 20}
}

PLANS_MAP = {k: v for k, v in PLANS.items()}

# ===============================
# –§—É–Ω–∫—Ü–∏–∏
# ===============================
def generate_client_config(client_ip: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ WireGuard"""
    private_key = secrets.token_hex(16)
    config = f"""
[Interface]
PrivateKey = {private_key}
Address = {client_ip}/32
DNS = {WG_CLIENT_DNS}

[Peer]
PublicKey = {WG_SERVER_PUBLIC_KEY}
Endpoint = {WG_SERVER_ENDPOINT}
AllowedIPs = {WG_ALLOWED_IPS}
"""
    return config.strip()


async def provision_and_send(chat_id: int, user, plan):
    # –î–ª—è —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º IP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    last_octet = secrets.randbelow(200) + 10
    client_ip = f"10.66.66.{last_octet}"
    config = generate_client_config(client_ip)
    await bot.send_message(chat_id, f"–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è {plan['name']} –≥–æ—Ç–æ–≤:\n\n<pre>{config}</pre>", parse_mode="HTML")


# ===============================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ===============================

@dp.message_handler(commands=["start"])
async df cmd_start(message: types.Message):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –∏–∑–±–∞–≤–∏—Ç—å –í–∞—Å –æ—Ç:\n\n"
        "‚û© –ó–∞–≤–∏—Å–∞—é—â–∏—Ö –≤–∏–¥–µ–æ –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —Å–µ—Ç–∏\n"
        "‚û© –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚û© –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ —á–∞—Å—Ç–æ–π —Å–º–µ–Ω—ã IP-–∞–¥—Ä–µ—Å–∞\n"
        "‚û© –£—Ç–µ—á–∫–∏ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ —É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö VPN)\n\n"
        "‚á© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  ‚á©"
	"1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω VPN ‚Äî /buy\n"
        "2Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî /status\n"
        "3Ô∏è‚É£ –ü–æ–º–æ—â—å ‚Äî /help"
    )

    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (ReplyKeyboard)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω VPN"))
    keyboard.add(KeyboardButton("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"))
       # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith("buy_"))
async def process_buy(call: types.CallbackQuery):
    plan_key = call.data.split("_")[1]
    plan = PLANS_MAP.get(plan_key)
    print(f"Callback –ø–æ–ª—É—á–µ–Ω: {call.data}, –ø–ª–∞–Ω: {plan_key}")
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥‚Ä¶")
    await provision_and_send(call.from_user.id, call.from_user, plan)


@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è.")


# ===============================
# –ó–∞–ø—É—Å–∫
# ===============================
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
