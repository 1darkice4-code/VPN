import os
import secrets
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import psycopg2

# ===============================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (sync psycopg2)
# ===============================
DB_HOST = os.getenv("DB_HOST", "db")
DB_PORT = int(os.getenv("DB_PORT", 5432))
DB_NAME = os.getenv("DB_NAME", "vpn_bot_db")
DB_USER = os.getenv("DB_USER", "vpn_bot_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "password123")

try:
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    cursor = conn.cursor()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", e)
    raise SystemExit(1)

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT UNIQUE,
    username TEXT,
    first_name TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    id SERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES users(telegram_id),
    plan TEXT,
    client_ip TEXT,
    config TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);
""")
conn.commit()

# ===============================
# –ö–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ .env
# ===============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ .env")

DEV_SKIP_PAYMENTS = os.getenv("DEV_SKIP_PAYMENTS", "1") == "1"

WG_SERVER_ENDPOINT = os.getenv("WG_SERVER_ENDPOINT", "127.0.0.1:51820")
WG_SERVER_PUBLIC_KEY = os.getenv("WG_SERVER_PUBLIC_KEY", "PUBLIC_KEY_PLACEHOLDER")
WG_CLIENT_DNS = os.getenv("WG_CLIENT_DNS", "1.1.1.1,8.8.8.8")
WG_ALLOWED_IPS = os.getenv("WG_ALLOWED_IPS", "0.0.0.0/0,::/0")
WG_SUBNET = os.getenv("WG_SUBNET", "10.66.66.0/24")

# ===============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
# ===============================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω—ã (–≤–∫–ª—é—á–∞—è premium)
PLANS = {
    "basic": {"name": "1 –º–µ—Å (–ë–∞–∑–æ–≤—ã–π)", "price": 249},
    "pro": {"name": "3 –º–µ—Å (Pro)", "price": 749},
    "premium": {"name": "6 –º–µ—Å (Premium)", "price": 1499}
}

# ===============================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ===============================
def generate_client_config(client_ip: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ WireGuard (—Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å wgrest –ø–æ–∑–∂–µ)"""
    private_key = secrets.token_hex(16)
    config = f"""
[Interface]
PrivateKey = {private_key}
Address = {client_ip}/32
DNS = {WG_CLIENT_DNS}

[Peer]
PublicKey = {WG_SERVER_PUBLIC_KEY}
Endpoint = {WG_SERVER_ENDPOINT}
AllowedIPs = {WG_ALLOWED_IPS}
"""
    return config.strip()

def save_user_to_db(user: types.User):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        cursor.execute(
            "INSERT INTO users (telegram_id, username, first_name) VALUES (%s, %s, %s) ON CONFLICT (telegram_id) DO NOTHING",
            (user.id, getattr(user, "username", None), getattr(user, "first_name", None))
        )
        conn.commit()
    except Exception as e:
        print("DB save_user error:", e)
        conn.rollback()

def save_subscription_to_db(user: types.User, plan_key: str, client_ip: str, config: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
        save_user_to_db(user)
        cursor.execute(
            "INSERT INTO subscriptions (user_id, plan, client_ip, config) VALUES (%s, %s, %s, %s)",
            (user.id, PLANS.get(plan_key, {}).get("name", plan_key), client_ip, config)
        )
        conn.commit()
    except Exception as e:
        print("DB save_subscription error:", e)
        conn.rollback()

# ===============================
# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)
# ===============================
async def provision_and_send(chat_id: int, user: types.User, plan_key: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é; —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î"""
    plan = PLANS.get(plan_key)
    if not plan:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IP –≤ –ø–æ–¥—Å–µ—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
    last_octet = secrets.randbelow(200) + 10
    client_ip = f"10.66.66.{last_octet}"
    config = generate_client_config(client_ip)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    save_subscription_to_db(user, plan_key, client_ip, config)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏ –∫–∞–∫ —Ñ–∞–π–ª (.conf) ‚Äî —É–¥–æ–±–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ pre-–±–ª–æ–∫–µ
        await bot.send_message(
            chat_id,
            f"‚úÖ –í–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è *{plan['name']}* –≥–æ—Ç–æ–≤:\n\n<pre>{config}</pre>",
            parse_mode="HTML"
        )
    except Exception:
        # fallback plain
        await bot.send_message(chat_id, f"–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è {plan['name']} –≥–æ—Ç–æ–≤. (–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥.)")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–∞–π–ª .conf
    try:
        from io import BytesIO
        bio = BytesIO()
        bio.write(config.encode())
        bio.seek(0)
        bio.name = f"wg_{client_ip}.conf"
        await bot.send_document(chat_id, bio)
    except Exception as e:
        print("send_document error:", e)

# ===============================
# –•–µ–Ω–¥–ª–µ—Ä—ã: –º–µ–Ω—é, –ø–æ–∫—É–ø–∫–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
# ===============================

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    save_user_to_db(message.from_user)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã\n\n"
        "–ù–∞—à VPN –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n\n"
        "‚û© –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä–µ–∫–ª–∞–º—ã –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
        "‚û© –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "‚û© –†–∞–±–æ—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
        "‚á© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚á©"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω VPN", callback_data="menu_buy"),
        InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_status"),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="menu_help")
    )

    await message.answer(welcome_text, reply_markup=keyboard)

# --- Buy menu ---
@dp.callback_query_handler(lambda c: c.data == "menu_buy")
async def callback_buy(call: types.CallbackQuery):
    await call.answer()
    keyboard = InlineKeyboardMarkup(row_width=1)
    for key, plan in PLANS.items():
        keyboard.add(InlineKeyboardButton(f"{plan['name']} ‚Äî {plan['price']}‚ÇΩ", callback_data=f"buy_{key}"))
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.startswith("buy_"))
async def process_buy(call: types.CallbackQuery):
    plan_key = call.data.split("_", 1)[1]
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥‚Ä¶")
    await provision_and_send(call.from_user.id, call.from_user, plan_key)

# --- Status ---
@dp.callback_query_handler(lambda c: c.data == "menu_status")
async def callback_status(call: types.CallbackQuery):
    await call.answer()
    try:
        cursor.execute(
            "SELECT plan, client_ip, created_at FROM subscriptions WHERE user_id=%s ORDER BY created_at DESC LIMIT 1",
            (call.from_user.id,)
        )
        sub = cursor.fetchone()
        if sub:
            plan_name, client_ip, created_at = sub
            created_str = created_at.strftime("%Y-%m-%d %H:%M:%S")
            await call.message.answer(f"üîî –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: *{plan_name}*\nIP: `{client_ip}`\n–î–∞—Ç–∞: {created_str}",
                                      parse_mode="Markdown")
        else:
            await call.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
    except Exception as e:
        print("status error:", e)
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- Help menu ---
@dp.callback_query_handler(lambda c: c.data == "menu_help")
async def callback_help(call: types.CallbackQuery):
    await call.answer()
    user_name = call.from_user.first_name or "–¥—Ä—É–≥"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?", callback_data="help_connect"),
        InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="help_issue"),
        InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", callback_data="help_contact"),
        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    )

    await call.message.edit_text(f"{user_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard)

# Help -> connect submenu
@dp.callback_query_handler(lambda c: c.data == "help_connect")
async def help_connect(call: types.CallbackQuery):
    await call.answer()
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("ü§ñ Android", callback_data="connect_android"),
        InlineKeyboardButton("üçè iOS", callback_data="connect_ios"),
        InlineKeyboardButton("üíª macOS", callback_data="connect_macos"),
        InlineKeyboardButton("üñ• Windows", callback_data="connect_windows"),
    )
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_help"))

    text = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ‚ô•Ô∏è\n\n"
        "‚á© –ö—É–¥–∞ –±—É–¥–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å VPN? ‚á©"
    )
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)

@dp.callback_query_handler(lambda c: c.data == "help_issue")
async def help_issue(call: types.CallbackQuery):
    await call.answer()
    user_name = call.from_user.first_name or "–¥—Ä—É–≥"
    text = (
        f"{user_name}, —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ üëá\n\n"
        "‚ÄºÔ∏è –ß–ò–¢–ê–¢–¨ –í–°–ï–ú ‚ÄºÔ∏è\n\n"
        "1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å VPN –∏ —Å–µ—Ç—å.\n"
        "2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n"
        "3. –ï—Å–ª–∏ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ \"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\".\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @Jotaro1707"
    )
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"),
    )
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "help_contact")
async def help_contact(call: types.CallbackQuery):
    await call.answer()
    text = "–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ ‚Äî –ø–∏—à–∏—Ç–µ @Jotaro1707"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?", callback_data="help_connect"),
        InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="help_issue"),
        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"),
    )
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "menu_main")
async def back_to_main(call: types.CallbackQuery):
    await call.answer()
    await cmd_start(call.message)

# --- Platform-specific instructions ---
@dp.callback_query_handler(lambda c: c.data == "connect_android")
async def connect_android(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –Ω–∞ Android:\n\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard: https://play.google.com/store/apps/details?id=com.wireguard.android\n"
        "2Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥ (–æ–Ω –ø—Ä–∏–¥–µ—Ç –≤ —á–∞—Ç–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏)\n"
        "3Ô∏è‚É£ –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ûï ‚Üí –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π .conf\n"
        "4Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å"
    )
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")))

@dp.callback_query_handler(lambda c: c.data == "connect_ios")
async def connect_ios(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üçè –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –Ω–∞ iOS:\n\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard: https://apps.apple.com/ru/app/wireguard/id1441195209\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .conf –∏–∑ —á–∞—Ç–∞ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –≤ WireGuard\n"
        "3Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å"
    )
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")))

@dp.callback_query_handler(lambda c: c.data == "connect_macos")
async def connect_macos(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üíª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è macOS:\n\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WireGuard: https://apps.apple.com/ru/app/wireguard/id1451685025?mt=12\n"
        "2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .conf –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "3Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å"
    )
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")))

@dp.callback_query_handler(lambda c: c.data == "connect_windows")
async def connect_windows(call: types.CallbackQuery):
    await call.answer()
    text = (
        "üñ• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:\n\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ WireGuard: https://download.wireguard.com/windows-client/wireguard-installer.exe\n"
        "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ .conf —Ñ–∞–π–ª –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "3Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å"
    )
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")))

# ===============================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===============================
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
