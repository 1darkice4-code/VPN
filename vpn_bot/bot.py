import os
import json
import secrets
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor


# ===============================
# –ö–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ .env
# ===============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ .env")

DEV_SKIP_PAYMENTS = os.getenv("DEV_SKIP_PAYMENTS", "1") == "1"

WG_SERVER_ENDPOINT = os.getenv("WG_SERVER_ENDPOINT", "127.0.0.1:51820")
WG_SERVER_PUBLIC_KEY = os.getenv("WG_SERVER_PUBLIC_KEY", "PUBLIC_KEY_PLACEHOLDER")
WG_CLIENT_DNS = os.getenv("WG_CLIENT_DNS", "1.1.1.1,8.8.8.8")
WG_ALLOWED_IPS = os.getenv("WG_ALLOWED_IPS", "0.0.0.0/0,::/0")
WG_SUBNET = os.getenv("WG_SUBNET", "10.66.66.0/24")

# ===============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
# ===============================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–ª–∞–Ω
PLANS = {
    "basic": {"name": "–ë–∞–∑–æ–≤—ã–π", "price": 10},
    "pro": {"name": "Pro", "price": 20}
}

PLANS_MAP = {k: v for k, v in PLANS.items()}

# ===============================
# –§—É–Ω–∫—Ü–∏–∏
# ===============================
def generate_client_config(client_ip: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ WireGuard"""
    private_key = secrets.token_hex(16)
    config = f"""
[Interface]
PrivateKey = {private_key}
Address = {client_ip}/32
DNS = {WG_CLIENT_DNS}

[Peer]
PublicKey = {WG_SERVER_PUBLIC_KEY}
Endpoint = {WG_SERVER_ENDPOINT}
AllowedIPs = {WG_ALLOWED_IPS}
"""
    return config.strip()


async def provision_and_send(chat_id: int, user, plan):
    # –î–ª—è —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º IP –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    last_octet = secrets.randbelow(200) + 10
    client_ip = f"10.66.66.{last_octet}"
    config = generate_client_config(client_ip)
    await bot.send_message(chat_id, f"–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è {plan['name']} –≥–æ—Ç–æ–≤:\n\n<pre>{config}</pre>", parse_mode="HTML")


# ===============================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ===============================

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name} üëã\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –∏–∑–±–∞–≤–∏—Ç—å –í–∞—Å –æ—Ç:\n\n"
        "‚û© –ó–∞–≤–∏—Å–∞—é—â–∏—Ö –≤–∏–¥–µ–æ –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —Å–µ—Ç–∏\n"
        "‚û© –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚û© –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ —á–∞—Å—Ç–æ–π —Å–º–µ–Ω—ã IP-–∞–¥—Ä–µ—Å–∞\n"
        "‚û© –£—Ç–µ—á–∫–∏ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ —É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö VPN)\n\n"
        "‚á© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚á©"
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω VPN", callback_data="menu_buy"),
        InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_status"),
        InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="menu_help")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(welcome_text, reply_markup=keyboard)

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == "menu_buy")
async def callback_buy(call: types.CallbackQuery):
    await call.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = call.from_user.first_name or "–¥—Ä—É–≥"

    # Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("1 –º–µ—Å - 249", callback_data="buy_basic"),
        InlineKeyboardButton("3 –º–µ—Å - 749", callback_data="buy_pro"),
        InlineKeyboardButton("6 –º–µ—Å - 1499", callback_data="buy_premium"),
    )

    await call.message.answer(f"{user_name}, –≤—ã–±–µ—Ä–µ—Ç–µ –ø–ª–∞–Ω:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "menu_status")
async def callback_status(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("–í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π")

@dp.callback_query_handler(lambda c: c.data == "menu_help")
async def callback_help(call: types.CallbackQuery):
    await call.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = call.from_user.first_name or "–¥—Ä—É–≥"

    # Inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?", callback_data="help_connect"),
        InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="help_issue"),
        InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", callback_data="help_contact"),
        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    await call.message.edit_text(
        f"{user_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "help_connect")
async def help_connect(call: types.CallbackQuery):
    await call.answer()

    # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="ü§ñ Android", callback_data="connect_android"),
        InlineKeyboardButton(text="üçè iOS", callback_data="connect_ios"),
        InlineKeyboardButton(text="üíª macOS", callback_data="connect_macos"),
        InlineKeyboardButton(text="üñ• Windows", callback_data="connect_windows"),
    )
    keyboard.add(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_help")
    )

    text = (
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ‚ô•Ô∏è \n\n"
        "‚û© –ü–æ–ø—Ä–æ–±–æ–≤–∞–≤ —Ä–∞–∑ ‚Äî –í—ã –ø–æ–π–º—ë—Ç–µ, –ø–æ—á–µ–º—É –ª—é–¥–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å –Ω–∞–º–∏. \n"
        "‚û© –í—ã –∑–∞–±—É–¥–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∞–π—Ç–∞—Ö. \n\n"
        "üì∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –†–æ—É—Ç–µ—Ä–æ–≤\\–¢–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤: "
        "[–ß–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](https://telegra.ph/Instrukciya-dlya-RouterovTelevizorov-08-23) \n\n"
        "‚á© –ö—É–¥–∞ –±—É–¥–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å VPN? ‚á©"
    )

    # –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º
    await call.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True, parse_mode="Markdown")


# --- Android ---
@dp.callback_query_handler(lambda c: c.data == "connect_android")
async def connect_android(call: types.CallbackQuery):
    await call.answer()


    await call.message.answer(
        "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –Ω–∞ Android:\n\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêWireGuard (https://play.google.com/store/apps/details?id=com.wireguard.android)\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π –µ–≥–æ (–≤—ã—à–µ –≤ —á–∞—Ç–µ *.conf)\n"
        "3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É Wireguard –∏ –Ω–∞–∂–º–∏ ‚ûï –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞\n"
        "4Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∞, –≤—ã–±–µ—Ä–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫\n"
        "5Ô∏è‚É£ –û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ç—É–º–±–ª–µ—Ä. –ï—Å–ª–∏ –ø–æ–ª–∑—É–Ω–æ–∫ —Å—Ç–∞–ª –∑–µ–ª—ë–Ω—ã–º, —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å üëè\n",
    )


# --- iOS ---
@dp.callback_query_handler(lambda c: c.data == "connect_ios")
async def connect_ios(call: types.CallbackQuery):
    await call.answer()


    await call.message.answer(
        "üçè –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –Ω–∞ iOS:\n\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêWireGuard (https://apps.apple.com/ru/app/wireguard/id1441195209)\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –∫–ª—é—á (–≤—ã—à–µ –≤ —á–∞—Ç–µ *.conf)\n"
        "3Ô∏è‚É£ –í –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∫–æ—Å–Ω–∏—Å—å —Å—Ç—Ä–µ–ª–∫–∏ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è\n"
        "4Ô∏è‚É£ –í —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º –≤—ã–±–µ—Ä–∏ Wireguard)\n"
        "5Ô∏è‚É£ –û—Å—Ç–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ç—É–º–±–ª–µ—Ä. –ï—Å–ª–∏ –ø–æ–ª–∑—É–Ω–æ–∫ —Å—Ç–∞–ª –∑–µ–ª—ë–Ω—ã–º, —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å üëè",

    )


# --- macOS ---
@dp.callback_query_handler(lambda c: c.data == "connect_macos")
async def connect_macos(call: types.CallbackQuery):
    await call.answer()


    await call.message.answer(
        "üíª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –Ω–∞ macOS:\n\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêWireGuard (https://apps.apple.com/ru/app/wireguard/id1451685025?mt=12)\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π –µ–≥–æ (–≤—ã—à–µ –≤ —á–∞—Ç–µ *.conf)\n"
        "3Ô∏è‚É£ –£–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Wireguard –Ω–∞ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∫–ª—é—á\n"
        "4Ô∏è‚É£ –í–∫–ª—é—á–∏ —Ç—É–º–±–ª–µ—Ä –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é üòâ",

    )


# --- Windows ---
@dp.callback_query_handler(lambda c: c.data == "connect_windows")
async def connect_windows(call: types.CallbackQuery):
    await call.answer()


    await call.message.answer(
        "üñ• –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN –Ω–∞ Windows:\n\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üåêWireGuard (https://download.wireguard.com/windows-client/wireguard-installer.exe)\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –Ω–∞ –∫–ª—é—á –∏ —Å–∫–∞—á–∞–π –µ–≥–æ (–≤—ã—à–µ –≤ —á–∞—Ç–µ *.conf)\n"
        "3Ô∏è‚É£ –£–∫–∞–∂–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é Wireguard –Ω–∞ —Å–∫–∞—á–∞–Ω–Ω—ã–π –∫–ª—é—á\n"
        "4Ô∏è‚É£ –í–∫–ª—é—á–∏ —Ç—É–º–±–ª–µ—Ä –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é üòâ",
    )


@dp.callback_query_handler(lambda c: c.data == "help_issue")
async def help_issue(call: types.CallbackQuery):
    await call.answer()
    user_name = call.from_user.first_name or "–¥—Ä—É–≥"

    text = (
        f"{user_name}, —è –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ üëá\n\n"
        "‚ÄºÔ∏è –ß–ò–¢–ê–¢–¨ –í–°–ï–ú ‚ÄºÔ∏è\n\n"
        "1. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –≤—Å–µ VPN –≤ –†–æ—Å—Å–∏–∏, "
        "–Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ > –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª > "
        "–ú–µ–Ω—è–µ–º –Ω–∞ Outline –∏ —Å–ª–µ–¥—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
        "2. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –±–æ—Ç–∞ ¬´–ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π¬ª –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã. "
        "–°–∫—Ä–∏–Ω—ã –±–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç! –í–æ–∑–º–æ–∂–Ω–æ, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ¬´–º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏¬ª.\n\n"
        "3. –°–µ—Ä–≤–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤, –Ω–æ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å–µ—Ç—å (Wi-Fi ‚ÜîÔ∏è LTE). "
        "–í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –∞–≤–∏–∞—Ä–µ–∂–∏–º, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ VPN ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç.\n\n"
        "4. Instagram: –µ—Å–ª–∏ —Å–∞–π—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è, –∞ Instagram –Ω–µ—Ç ‚Äî —É–¥–∞–ª–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.\n\n"
        "5. –°—Ç–∞—Ä—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–µ —Å–µ—Ç–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å VPN. –≠—Ç–æ –Ω–µ –Ω–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞.\n\n"
        "6. –ï—Å–ª–∏ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—É—é —Å–µ—Ç—å ‚Äî —ç—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. "
        "–ú—ã –∏—â–µ–º –æ–±—Ö–æ–¥—ã.\n\n"
        "–ï—Å–ª–∏ VPN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–∞—à —Å–ª—É—á–∞–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—É–Ω–∫—Ç–∞–º–∏ –≤—ã—à–µ, –Ω–∞–ø–∏—à–∏—Ç–µ: @Jotaro1707"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
    InlineKeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?", callback_data="help_connect"),
    InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", callback_data="help_contact"),
    InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    )
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "help_contact")
async def help_contact(call: types.CallbackQuery):
    await call.answer()

    text = (
        "–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, —É–ª—É—á—à–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏ –ø–æ –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, "
        "–ø–∏—à–∏—Ç–µ –º–Ω–µ üëâ @Jotaro1707"
    )

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?", callback_data="help_connect"),
        InlineKeyboardButton("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN", callback_data="help_issue"),
        InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main"),
    )

    # –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º + –∫–Ω–æ–ø–∫–∏
    await call.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "menu_main")
async def back_to_main(call: types.CallbackQuery):
    await call.answer()
    await cmd_start(call.message)  # –≤–µ—Ä–Ω—ë—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é



@dp.callback_query_handler(lambda call: call.data.startswith("buy_"))
async def process_buy(call: types.CallbackQuery):
    plan_key = call.data.split("_")[1]
    plan = PLANS_MAP.get(plan_key)
    print(f"Callback –ø–æ–ª—É—á–µ–Ω: {call.data}, –ø–ª–∞–Ω: {plan_key}")
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥‚Ä¶")
    await provision_and_send(call.from_user.id, call.from_user, plan)


@dp.message_handler(commands=["status"])
async def cmd_status(message: types.Message):
    await message.answer("–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è.")


# ===============================
# –ó–∞–ø—É—Å–∫
# ===============================
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞‚Ä¶")
    executor.start_polling(dp, skip_updates=True)
